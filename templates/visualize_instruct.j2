<!-- 
    This HTML template file is used for visualizing the InstructScore data.
    It extends the "base.html" template and contains blocks for title and content.
    The content includes a loop to display predictions and references, as well as statistics and pagination controls.
    The predictions are displayed with error information, and the references are displayed separately.
    The statistics include the total number of errors, average number of errors per prediction, and most frequent types of errors.
    The pagination controls allow the user to navigate between pages of data.
    The hidden form and JavaScript functions are used to update the file value and submit the form when navigating between pages.
-->
{% extends "base.html" %}

{% block title %}
InstructScore Visualizer
{% endblock %}

{% block content %}



<body>

<style>
        .input-form {
            display: flex;
            flex-direction: column;
        }

        .form-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .form-row select, .form-row input {
            margin-right: 10px;
        }

        .submit-button {
            margin-top: 10px;
        }

        .remove-button {
            margin-left: 10px;
            cursor: pointer;
            color: red;
        }
    </style>

    <div class="content-holder">
        <div class="container">
             <form method="POST" action="{{ url_for('visualize_instruct') }}" class="input-form" id="search-form">
                {% for i in range(search_options|length) %}
                <div class="form-row" id="form-row-{{ i+1 }}">
                    <select name="search_options[]" class="search-options" onchange="handleOptionChange(this)">
                        <option value="" disabled selected>Search Field</option>
                        <option value="preds.source_text" {% if "preds.source_text" == search_options[i] %}selected{% endif %}>Prediction Text</option>
                        <option value="refs.source_text" {% if "refs.source_text" == search_options[i] %}selected{% endif %}>Reference Text</option>
                        <option value="preds_text.error_type" {% if "preds_text.error_type" == search_options[i] %}selected{% endif %}>Error Type</option>
                        <option value="preds_text.error_scale" {% if "preds_text.error_scale" == search_options[i] %}selected{% endif %}>Error Scale</option>
                        <option value="preds_text.error_explanation" {% if "preds_text.error_explanation" == search_options[i] %}selected{% endif %}>Error Explanation</option>
                        <option value="runs.source_language" {% if "runs.source_language" == search_options[i] %}selected{% endif %}>Source Language</option>
                        <option value="refs.lang" {% if "refs.lang" == search_options[i] %}selected{% endif %}>Target Language</option>
                    </select>
                    <input type="text" name="search_texts[]" placeholder="Search..." value="{{ search_texts[i] }}">
                    {% if i < conjunctions|length %}
                        <select name="conjunctions[]" class="conjunction" onchange="addNewSearchRow(this)">
                            <option value="" disabled>Add another search term:</option>
                            <option value="AND" {% if conjunctions[i] == 'AND' %}selected{% endif %}>AND</option>
                            <option value="OR" {% if conjunctions[i] == 'OR' %}selected{% endif %}>OR</option>
                            <option value="NOT" {% if conjunctions[i] == 'NOT' %}selected{% endif %}>NOT</option>
                        </select>
                    {% endif %}
                    {% if i > 0%}
                         <button type="button" class="remove-button" onclick="this.parentElement.remove()">Remove</button>
                    {% endif %}
                </div>
                {% endfor %}
                {% if search_options|length == 0 %}
                    <div class="form-row" id="form-row-1">
                        <select name="search_options[]" class="search-options" onchange="handleOptionChange(this)">
                            <option value="" disabled selected>Search Field</option>
                            <option value="preds.source_text">Prediction Text</option>
                            <option value="refs.source_text">Reference Text</option>
                            <option value="preds_text.error_type">Error Type</option>
                            <option value="preds_text.error_scale">Error Scale</option>
                            <option value="preds_text.error_explanation">Error Explanation</option>
                            <option value="runs.source_language">Source Language</option>
                            <option value="refs.lang">Target Language</option>
                        </select>
                        <input type="text" name="search_texts[]" placeholder="Search...">
                    </div>
                {% endif %}
                <input type="hidden" name="current_page" id="search_page" value="{{ current_page }}">
                {% for file in files%}
                    <input type="hidden" name="files" id="files_search" value={{ file }}>
                {% endfor %}
                <button type="submit" class="submit-button">Search</button>
            </form>
            
            
        </div>

        {% for evaluation in input_data%}
            <div class="container">        
                <div>
                {% for file, data in evaluation.runs.items() %}
                    <h1 class="description"> {{ file }}: </h1>
                    
                    <h1 class="pred-ref"> Prediction: </h1>
                    {% for key, value in data.prediction.items()%}
                        {% if value == "None" %}
                            <span class="description">{{ key }} </span>
                        {% elif value is mapping %}
                            {% if value.error_scale == "Minor" %}
                                <span class="orange-text">{{ key }} </span>
                            {% else %}
                                <span class="red-text">{{ key }} </span>
                            {% endif %}
                            <span class="tooltip">
                                Error Type: {{ value.error_type }}<br>
                                Major/minor: {{ value.error_scale }}<br>
                                Error explanation: {{ value.error_explanation }}
                            </span>
                        {% else %}
                            {{ value }}
                        {% endif %}
                        {% if not loop.last %} {% endif %}
                    {% endfor %}
                {% endfor %}
                </div>

                <div> 
                    <h1 class="pred-ref" > Reference: </h1>            
                    <span class="description">{{ evaluation.reference }}</span>
                </div>
            </div>
        {% endfor %}

        <div class="stats-circle">
            <img src="{{ url_for('static', filename='stats.png') }}" class="stats-circle-image">
        </div>
        <span class="stats-tooltip">
            <p>Total number of errors: {{ num_errors }}</p>
            <p>Average number of errors per prediction: {{ avg_errors }}</p>
            <p> Most frequent types of errors: </p>
                {% for error_type in most_common_errors %}
                    <p>{{ error_type[0] }}: {{ error_type[1] }} times</p>
                {% endfor %}
            <p>SEScore: {{ se_score }}</p>
            
        </span>

        <!-- Pagination controls -->
            <!-- Pagination controls -->
        <div class = "pagination">
                {% if current_page > 1 %}
                    <div>
                        <form id="hiddenForm_previous" method="POST" action="{{ url_for('visualize_instruct') }}">
                            {% for file in files%}
                                <input type="hidden" name="files" id="files_previous" value={{ file }}>
                            {% endfor %}
                            <input type="hidden" name="current_page" id="previous_page" value={{ current_page-1}}>
                            <button type="submit" class="pagination-button">Previous</button>
                        </form>
                    </div>
                {% endif %}
            
            <div class="pagination-text">
                Page {{ current_page }} of {{ total_pages }}
            </div>
            
            
                {% if current_page < total_pages %}
                    <!-- Next button with onclick event to update the form -->
                    <div>
                        <form id="hiddenForm_next" method="POST" action="{{ url_for('visualize_instruct') }}">
                            {% for file in files%}
                                <input type="hidden" name="files" id="files_next" value={{ file }}>
                            {% endfor %}
                            <input type="hidden" name="current_page" id="next_page" value={{ current_page+1}}>
                            <button type="submit" class="pagination-button">Next</button>
                        </form>
                    </div>
                {% endif %}
           


        </div>
    </div>

 

    

    
</body>


   <script>
         const searchOptionsAll = [
            { value: 'preds.source_text', text: 'Prediction Text' },
            { value: 'refs.source_text', text: 'Reference Text' },
            { value: 'preds_text.error_type', text: 'Error Type' },
            { value: 'preds_text.error_scale', text: 'Error Scale' },
            { value: 'preds_text.error_explanation', text: 'Error Explanation' },
            { value: 'runs.source_language', text: 'Source Language' },
            { value: 'refs.lang', text: 'Target Language' }
        ];

        function handleOptionChange(selectElement) {
            const formRowId = selectElement.parentElement.id;
            const form = document.getElementById('search-form');

            if (!form.querySelector(`#${formRowId} .conjunction`)) {
                // Add conjunction dropdown
                const conjunctionSelect = document.createElement('select');
                conjunctionSelect.name = 'conjunctions[]';
                conjunctionSelect.className = 'conjunction';
                conjunctionSelect.innerHTML = `
                    <option value="" disabled selected>Add another search term:</option>
                    <option value="AND">AND</option>
                    <option value="OR">OR</option>
                    <option value="NOT">NOT</option>
                `;
                conjunctionSelect.onchange = function() {
                        if (!document.getElementById(`form-row-${parseInt(selectElement.parentElement.id.split('-')[2]) + 1}`)) {
                            addNewSearchRow(selectElement, conjunctionSelect);
                            
                        }
                };

                selectElement.parentElement.appendChild(conjunctionSelect);
            }
        }

        function addNewSearchRow(previousSelect, conjunctionSelect) {
            const form = document.getElementById('search-form');
            const selectedOptions = [...form.querySelectorAll('.search-options')].map(select => select.value);

            let remainingOptions = searchOptionsAll.filter(option => !selectedOptions.includes(option.value));

            if (remainingOptions.length === 0) return;

            // Create new form row
            const newRow = document.createElement('div');
            newRow.className = 'form-row added-row';
            newRow.id = `form-row-${form.querySelectorAll('.form-row').length + 1}`;

            // Create new search option dropdown
            const newSelect = document.createElement('select');
            newSelect.name = 'search_options[]';
            newSelect.className = 'search-options';
            newSelect.onchange = function() {
                handleOptionChange(newSelect);
            };

            remainingOptions.forEach(option => {
                const optionElement = document.createElement('option');
                optionElement.value = option.value;
                optionElement.text = option.text;
                newSelect.appendChild(optionElement);
            });

            // Create new search text input
            const newInput = document.createElement('input');
            newInput.type = 'text';
            newInput.name = 'search_texts[]';
            newInput.placeholder = 'Search...';

            // Create remove button
            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'remove-button';
            removeButton.innerText = 'Remove';
            removeButton.onclick = function() {
                form.removeChild(newRow);
            };

            newRow.appendChild(newSelect);
            newRow.appendChild(newInput);
            newRow.appendChild(removeButton);

            form.insertBefore(newRow, form.querySelector('.submit-button'));
        }

        document.addEventListener('DOMContentLoaded', function () {
            const searchOptions = {{ search_options|tojson }};
            const searchTexts = {{ search_texts|tojson }};
            const conjunctions = {{ conjunctions|tojson }};

            if (searchOptions.length > 0) {
                const form = document.getElementById('search-form');
                for (let i = 1; i < searchOptions.length; i++) {
                    addNewSearchRow(null, form.querySelector('.conjunction'));
                }
            }
        });
    </script>

{% endblock %}
